#!/usr/bin/env bash


# Create a new directory and enter it
function mkd() {
	mkdir -p "$@" && cd "$_";
}


# for onebox
alias onebox="ssh -t fzheng-onebox.dev.lyft.net onebox_env"
function lcontainer() {
	ssh "${1}-legacy-fzheng-onebox.dev.lyft.net"
}
function lsync() {
	src="/Users/fzheng/go/src/github.com/lyft"
	cd ${src}/${1}
	../hacktools/sync-to-onebox-v3.sh ${1}-legacy-fzheng
}
function ltail() {
	ssh "${1}-legacy-fzheng-onebox.dev.lyft.net" "tail -f /var/log/${1}-web/current"
}
function lrestart() {
	ssh "${1}-legacy-fzheng-onebox.dev.lyft.net" "cd /go/src/github.com/lyft/${1} && GOPATH=/go go build  && sudo cp ${1} /usr/local/bin/${1} && pkill -9 ${1}"
}



# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}


# Determine size of a file or total size of a directory
function fs() {
	if du -b /dev/null > /dev/null 2>&1; then
		local arg=-sbh;
	else
		local arg=-sh;
	fi
	if [[ -n "$@" ]]; then
		du $arg -- "$@";
	else
		du $arg .[^.]* ./*;
	fi;
}

# Start an HTTP server from a directory, optionally specifying the port
function server() {
	local port="${1:-8000}";
	sleep 1 && open "http://localhost:${port}/" &
	# Set the default Content-Type to `text/plain` instead of `application/octet-stream`
	# And serve everything as UTF-8 (although not technically correct, this doesn’t break anything for binary files)
	python -c $'import SimpleHTTPServer;\nmap = SimpleHTTPServer.SimpleHTTPRequestHandler.extensions_map;\nmap[""] = "text/plain";\nfor key, value in map.items():\n\tmap[key] = value + ";charset=UTF-8";\nSimpleHTTPServer.test();' "$port";
}


# Compare original and gzipped file size
function gz() {
	local origsize=$(wc -c < "$1");
	local gzipsize=$(gzip -c "$1" | wc -c);
	local ratio=$(echo "$gzipsize * 100 / $origsize" | bc -l);
	printf "orig: %d bytes\n" "$origsize";
	printf "gzip: %d bytes (%2.2f%%)\n" "$gzipsize" "$ratio";
}


# Syntax-highlight JSON strings or files
# Usage: `json '{"foo":42}'` or `echo '{"foo":42}' | json`
function json() {
	if [ -t 0 ]; then # argument
		python -mjson.tool <<< "$*" | pygmentize -l javascript;
	else # pipe
		python -mjson.tool | pygmentize -l javascript;
	fi;
}

# `v` with no arguments opens the current directory in Vim, otherwise opens the
# given location
function v() {
	if [ $# -eq 0 ]; then
		vim .;
	else
		vim "$@";
	fi;
}

# `o` with no arguments opens the current directory, otherwise opens the given
# location
function o() {
	if [ $# -eq 0 ]; then
		open .;
	else
		open "$@";
	fi;
}

# `tre` is a shorthand for `tree` with hidden files and color enabled, ignoring
# the `.git` directory, listing directories first. The output gets piped into
# `less` with options to preserve color and line numbers, unless the output is
# small enough for one screen.
function tre() {
	tree -aC -I '.git|node_modules|bower_components' --dirsfirst "$@" | less -FRNX;
}

# leetcode to get a file in golang
function lcg() {
	lc="docker run -it --rm -v /Users/fred/workspace/leetcode-cli/go:/root skygragon/leetcode-cli show $@ -gx -l golang"
	eval $lc
}



# lyft to clone a repository
function lclone() {
	clone="git clone git@github.com:lyft/$@"
	eval $clone
}

# git merge change from master
function gitmerge () {
	old_branch=$(git rev-parse --abbrev-ref HEAD)
	git checkout master
	git pull
	git checkout ${old_branch}
	git merge master
}

function gpush() {
	current_branch=$(git rev-parse --abbrev-ref HEAD)
	git push origin ${current_branch}
}

function rom() {
	rom_command="ssh -t readonlydb.ln 'export LC_ALL=C; rom $@'"
	eval ${rom_command}
}